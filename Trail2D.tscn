[gd_scene load_steps=2 format=3 uid="uid://cwh7t6aadacs7"]

[sub_resource type="GDScript" id="GDScript_10hpw"]
script/source = "extends Node3D

# Trail sampling and appearance parameters.
@export var emit: bool = true
@export var distance: float = 0.1                     # Minimum distance between sampled points.
@export var segments: int = 20                        # Desired number of segments.
@export var lifetime: float = 0.5                     # Lifetime of each trail point.
@export var base_width: float = 0.5                   # Base width of the trail.
@export var tiled_texture: bool = false               # If true, UVs will be tiled.
@export var tiling: int = 0                           # Tiling factor; if 0, auto-calculate.
@export var width_profile: Curve                    # Optional width profile (range 0..1).
@export var color_gradient: Gradient                # Color gradient for the trail.
@export var smoothing_iterations: int = 0           # How many passes of smoothing to apply.
@export var smoothing_ratio: float = 0.25           # Smoothing ratio.
@export var alignment: String = \"View\"              # \"View\", \"Normal\", or \"Object\"
@export var axe: String = \"Y\"                       # When not using \"View\" alignment, choose axis: \"X\", \"Y\", or \"Z\"
@export var show_wireframe: bool = false            # Optionally draw a wireframe overlay.
@export var wireframe_color: Color = Color(1,1,1,1)
@export var wire_line_width: float = 1.0

# List of trail points.
var points: Array = []

# Reference to the target node (the one being followed).
var _target: Node3D

# A MeshInstance3D child for rendering the trail.
var mesh_instance: MeshInstance3D

# Optional: A separate MeshInstance3D for the wireframe.
var wire_instance: MeshInstance3D

# Class representing an individual trail point.
class TrailPoint:
	var transform: Transform3D
	var age: float
	func _init(transform: Transform3D, age: float) -> void:
		self.transform = transform
		self.age = age
	func update(delta: float) -> void:
		age -= delta

# Add a new point to the trail.
func add_point(transform: Transform3D) -> void:
	var pt = TrailPoint.new(transform, lifetime)
	points.push_back(pt)

# Remove all points.
func clear_points() -> void:
	points.clear()

# Smooth the trail using a Chaikin-style algorithm.
func smooth_points(input_points: Array) -> Array:
	if input_points.size() < 3 or smoothing_iterations <= 0:
		return input_points
	var smoothed = input_points.duplicate()
	for i in range(smoothing_iterations):
		var new_points := [ smoothed[0] ]
		for j in range(1, smoothed.size()-1):
			var A = smoothed[j-1]
			var B = smoothed[j]
			var C = smoothed[j+1]
			# Create two intermediate points.
			var t1 = A.transform.interpolate_with(B.transform, 0.75)
			var t2 = B.transform.interpolate_with(C.transform, 0.25)
			var a1 = lerp(A.age, B.age, 0.75)
			var a2 = lerp(B.age, C.age, 0.25)
			new_points.append(TrailPoint.new(t1, a1))
			new_points.append(TrailPoint.new(t2, a2))
		new_points.push_back(smoothed[smoothed.size()-1])
		smoothed = new_points
	return smoothed

# Update each point's age and remove expired points.
func _update_points(delta: float) -> void:
	for pt in points:
		pt.update(delta)
	points = points.filter(func(pt):
		return pt.age > 0
	)

# Prepare geometry for a segment between two points,
# computing a width that goes from 0 at the tail to full base_width at the head.
func _prepare_geometry(prev_pt: TrailPoint, pt: TrailPoint, factor: float) -> Array:
	var normal: Vector3 = Vector3.ZERO
	if alignment == \"View\":
		var cam = get_viewport().get_camera_3d()
		if cam:
			var cam_pos = cam.global_transform.origin
			var path_dir = (pt.transform.origin - prev_pt.transform.origin).normalized()
			normal = (cam_pos - (pt.transform.origin + prev_pt.transform.origin) * 0.5).cross(path_dir).normalized()
		else:
			normal = Vector3.UP
	elif alignment == \"Normal\":
		match axe:
			\"X\": normal = pt.transform.basis.x.normalized()
			\"Y\": normal = pt.transform.basis.y.normalized()
			\"Z\": normal = pt.transform.basis.z.normalized()
	else:  # \"Object\"
		if _target:
			match axe:
				\"X\": normal = _target.global_transform.basis.x.normalized()
				\"Y\": normal = _target.global_transform.basis.y.normalized()
				\"Z\": normal = _target.global_transform.basis.z.normalized()
		else:
			normal = Vector3.UP

	# Calculate the width so that at factor==0 it's 0 (tail) and at factor==1 it's full base_width.
	var current_width = base_width * factor
	# Optionally modify the width with a width_profile if provided.
	if width_profile:
		current_width *= width_profile.interpolate(factor)
		
	# The width is applied equally to both sides.
	var p1 = pt.transform.origin - normal * current_width
	var p2 = pt.transform.origin + normal * current_width
	return [ p1, p2 ]

# Build the trail mesh with SurfaceTool.
func _update_mesh() -> void:
	if points.size() < 2:
		return
	var st = SurfaceTool.new()
	st.begin(Mesh.PRIMITIVE_TRIANGLE_STRIP)
	var pts = smooth_points(points)
	var u: float = 0.0
	# Iterate through the points, computing a factor from 0 (oldest) to 1 (newest)
	for i in range(1, pts.size()):
		var factor = float(i) / float(pts.size()-1)
		var col: Color = Color(1,0,0,1)
		if color_gradient:
			# Use the sample() method to get the color at the offset.
			col = color_gradient.sample(factor)
		st.set_color(col)
		# Use the factor directly to compute the tapered width.
		var verts = _prepare_geometry(pts[i-1], pts[i], factor)
		if tiled_texture:
			if tiling > 0:
				factor *= tiling
			else:
				var travel = (pts[i-1].transform.origin - pts[i].transform.origin).length()
				u += travel / base_width
				factor = u
		st.set_uv(Vector2(factor, 0))
		st.add_vertex(verts[0])
		st.set_uv(Vector2(factor, 1))
		st.add_vertex(verts[1])
	st.index() # finalize indices
	var new_mesh = st.commit()
	if new_mesh:
		mesh_instance.mesh = new_mesh

	# Optionally update the wireframe.
	if show_wireframe:
		var st_wire = SurfaceTool.new()
		st_wire.begin(Mesh.PRIMITIVE_LINE_STRIP)
		st_wire.set_color(wireframe_color)
		for pt in pts:
			st_wire.add_vertex(pt.transform.origin)
		var wire_mesh = st_wire.commit()
		if wire_mesh:
			wire_instance.mesh = wire_mesh

# Stops emitting new points and optionally triggers a fade-out (not implemented here).
func stop_trail() -> void:
	emit = false
	# Optionally start a tween to fade out the mesh_instance's material,
	# then queue_free() after fade out.

func _process(delta: float) -> void:
	_update_points(delta)
	if emit:
		_emit(delta)
	elif points.size() > 0:
		_update_mesh()

# Called every frame when emitting. Samples the target's transform.
func _emit(delta: float) -> void:
	if not _target:
		return
	# Only add a new point if moved enough.
	if points.size() == 0 or _target.global_transform.origin.distance_squared_to(points[points.size()-1].transform.origin) >= distance * distance:
		add_point(_target.global_transform)
	_update_mesh()

func initialize(f_node: Node3D) -> void:
	_target = f_node

func _ready() -> void:
	# Expect _target to be set by initialize() before _ready() is called.
	assert(_target != null, \"Trail requires a target node set via initialize()!\")
	
	# Override the gradient if it's not set or empty.
	if not color_gradient or color_gradient.get_point_count() < 2:
		color_gradient = Gradient.new()
		color_gradient.set_color(0, Color(1, 0, 0))  # Red at the tail.
		color_gradient.set_color(1, Color(1, 1, 0))  # Yellow at the head.
	
	# Create a MeshInstance3D for the trail mesh.
	mesh_instance = MeshInstance3D.new()
	# Create a material that uses vertex colors.
	var mat = StandardMaterial3D.new()
	mat.vertex_color_use_as_albedo = true
	mat.shading_mode = BaseMaterial3D.SHADING_MODE_UNSHADED
	mesh_instance.material_override = mat
	add_child(mesh_instance)
	
	# Optionally create a MeshInstance3D for the wireframe.
	if show_wireframe:
		wire_instance = MeshInstance3D.new()
		add_child(wire_instance)
	
	# Add initial points to prime the trail so it starts rendering immediately.
	add_point(_target.global_transform)
	add_point(_target.global_transform)
"

[node name="Trail2d" type="Node3D"]
script = SubResource("GDScript_10hpw")
